{
  "resolvedId": "C:/Users/thumb/Desktop/이엄지/이엄지/dldjawl/node_modules/swiper/modules/controller.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { n as nextTick, i as elementTransitionEnd } from '../shared/utils.mjs';\n\n/* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */\nfunction Controller(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    controller: {\n      control: undefined,\n      inverse: false,\n      by: 'slide' // or 'container'\n    }\n  });\n\n  swiper.controller = {\n    control: undefined\n  };\n  function LinearSpline(x, y) {\n    const binarySearch = function search() {\n      let maxIndex;\n      let minIndex;\n      let guess;\n      return (array, val) => {\n        minIndex = -1;\n        maxIndex = array.length;\n        while (maxIndex - minIndex > 1) {\n          guess = maxIndex + minIndex >> 1;\n          if (array[guess] <= val) {\n            minIndex = guess;\n          } else {\n            maxIndex = guess;\n          }\n        }\n        return maxIndex;\n      };\n    }();\n    this.x = x;\n    this.y = y;\n    this.lastIndex = x.length - 1;\n    // Given an x value (x2), return the expected y2 value:\n    // (x1,y1) is the known point before given value,\n    // (x3,y3) is the known point after given value.\n    let i1;\n    let i3;\n    this.interpolate = function interpolate(x2) {\n      if (!x2) return 0;\n\n      // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n      i3 = binarySearch(this.x, x2);\n      i1 = i3 - 1;\n\n      // We have our indexes i1 & i3, so we can calculate already:\n      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n    };\n    return this;\n  }\n  function getInterpolateFunction(c) {\n    swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n  }\n  function setTranslate(_t, byController) {\n    const controlled = swiper.controller.control;\n    let multiplier;\n    let controlledTranslate;\n    const Swiper = swiper.constructor;\n    function setControlledTranslate(c) {\n      if (c.destroyed) return;\n\n      // this will create an Interpolate function based on the snapGrids\n      // x is the Grid of the scrolled scroller and y will be the controlled scroller\n      // it makes sense to create this only once and recall it for the interpolation\n      // the function does a lot of value caching for performance\n      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n      if (swiper.params.controller.by === 'slide') {\n        getInterpolateFunction(c);\n        // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n        // but it did not work out\n        controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n      }\n      if (!controlledTranslate || swiper.params.controller.by === 'container') {\n        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n        if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {\n          multiplier = 1;\n        }\n        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n      }\n      if (swiper.params.controller.inverse) {\n        controlledTranslate = c.maxTranslate() - controlledTranslate;\n      }\n      c.updateProgress(controlledTranslate);\n      c.setTranslate(controlledTranslate, swiper);\n      c.updateActiveIndex();\n      c.updateSlidesClasses();\n    }\n    if (Array.isArray(controlled)) {\n      for (let i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTranslate(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTranslate(controlled);\n    }\n  }\n  function setTransition(duration, byController) {\n    const Swiper = swiper.constructor;\n    const controlled = swiper.controller.control;\n    let i;\n    function setControlledTransition(c) {\n      if (c.destroyed) return;\n      c.setTransition(duration, swiper);\n      if (duration !== 0) {\n        c.transitionStart();\n        if (c.params.autoHeight) {\n          nextTick(() => {\n            c.updateAutoHeight();\n          });\n        }\n        elementTransitionEnd(c.wrapperEl, () => {\n          if (!controlled) return;\n          c.transitionEnd();\n        });\n      }\n    }\n    if (Array.isArray(controlled)) {\n      for (i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTransition(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTransition(controlled);\n    }\n  }\n  function removeSpline() {\n    if (!swiper.controller.control) return;\n    if (swiper.controller.spline) {\n      swiper.controller.spline = undefined;\n      delete swiper.controller.spline;\n    }\n  }\n  on('beforeInit', () => {\n    if (typeof window !== 'undefined' && (\n    // eslint-disable-line\n    typeof swiper.params.controller.control === 'string' || swiper.params.controller.control instanceof HTMLElement)) {\n      const controlElement = document.querySelector(swiper.params.controller.control);\n      if (controlElement && controlElement.swiper) {\n        swiper.controller.control = controlElement.swiper;\n      } else if (controlElement) {\n        const onControllerSwiper = e => {\n          swiper.controller.control = e.detail[0];\n          swiper.update();\n          controlElement.removeEventListener('init', onControllerSwiper);\n        };\n        controlElement.addEventListener('init', onControllerSwiper);\n      }\n      return;\n    }\n    swiper.controller.control = swiper.params.controller.control;\n  });\n  on('update', () => {\n    removeSpline();\n  });\n  on('resize', () => {\n    removeSpline();\n  });\n  on('observerUpdate', () => {\n    removeSpline();\n  });\n  on('setTranslate', (_s, translate, byController) => {\n    if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n    swiper.controller.setTranslate(translate, byController);\n  });\n  on('setTransition', (_s, duration, byController) => {\n    if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n    swiper.controller.setTransition(duration, byController);\n  });\n  Object.assign(swiper.controller, {\n    setTranslate,\n    setTransition\n  });\n}\n\nexport { Controller as default };\n",
      "start": 1710320465657,
      "end": 1710320465780,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710320465780,
      "end": 1710320465780,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710320465780,
      "end": 1710320465780,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710320465780,
      "end": 1710320465781,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710320465781,
      "end": 1710320465781,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710320465781,
      "end": 1710320465781,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710320465781,
      "end": 1710320465781,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710320465781,
      "end": 1710320465781,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710320465781,
      "end": 1710320465781,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710320465781,
      "end": 1710320465781,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710320465781,
      "end": 1710320465781,
      "order": "normal"
    },
    {
      "name": "vite-plugin-eslint",
      "start": 1710320465781,
      "end": 1710320465781,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710320465784,
      "end": 1710320465784,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710320465784,
      "end": 1710320465784,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710320465785,
      "end": 1710320465785,
      "order": "normal"
    }
  ]
}
