{
  "resolvedId": "C:/Users/thumb/Desktop/이엄지/이엄지/dldjawl/node_modules/swiper/modules/history.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { a as getWindow } from '../shared/ssr-window.esm.mjs';\n\nfunction History(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    history: {\n      enabled: false,\n      root: '',\n      replaceState: false,\n      key: 'slides',\n      keepQuery: false\n    }\n  });\n  let initialized = false;\n  let paths = {};\n  const slugify = text => {\n    return text.toString().replace(/\\s+/g, '-').replace(/[^\\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n  };\n  const getPathValues = urlOverride => {\n    const window = getWindow();\n    let location;\n    if (urlOverride) {\n      location = new URL(urlOverride);\n    } else {\n      location = window.location;\n    }\n    const pathArray = location.pathname.slice(1).split('/').filter(part => part !== '');\n    const total = pathArray.length;\n    const key = pathArray[total - 2];\n    const value = pathArray[total - 1];\n    return {\n      key,\n      value\n    };\n  };\n  const setHistory = (key, index) => {\n    const window = getWindow();\n    if (!initialized || !swiper.params.history.enabled) return;\n    let location;\n    if (swiper.params.url) {\n      location = new URL(swiper.params.url);\n    } else {\n      location = window.location;\n    }\n    const slide = swiper.slides[index];\n    let value = slugify(slide.getAttribute('data-history'));\n    if (swiper.params.history.root.length > 0) {\n      let root = swiper.params.history.root;\n      if (root[root.length - 1] === '/') root = root.slice(0, root.length - 1);\n      value = `${root}/${key ? `${key}/` : ''}${value}`;\n    } else if (!location.pathname.includes(key)) {\n      value = `${key ? `${key}/` : ''}${value}`;\n    }\n    if (swiper.params.history.keepQuery) {\n      value += location.search;\n    }\n    const currentState = window.history.state;\n    if (currentState && currentState.value === value) {\n      return;\n    }\n    if (swiper.params.history.replaceState) {\n      window.history.replaceState({\n        value\n      }, null, value);\n    } else {\n      window.history.pushState({\n        value\n      }, null, value);\n    }\n  };\n  const scrollToSlide = (speed, value, runCallbacks) => {\n    if (value) {\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides[i];\n        const slideHistory = slugify(slide.getAttribute('data-history'));\n        if (slideHistory === value) {\n          const index = swiper.getSlideIndex(slide);\n          swiper.slideTo(index, speed, runCallbacks);\n        }\n      }\n    } else {\n      swiper.slideTo(0, speed, runCallbacks);\n    }\n  };\n  const setHistoryPopState = () => {\n    paths = getPathValues(swiper.params.url);\n    scrollToSlide(swiper.params.speed, paths.value, false);\n  };\n  const init = () => {\n    const window = getWindow();\n    if (!swiper.params.history) return;\n    if (!window.history || !window.history.pushState) {\n      swiper.params.history.enabled = false;\n      swiper.params.hashNavigation.enabled = true;\n      return;\n    }\n    initialized = true;\n    paths = getPathValues(swiper.params.url);\n    if (!paths.key && !paths.value) {\n      if (!swiper.params.history.replaceState) {\n        window.addEventListener('popstate', setHistoryPopState);\n      }\n      return;\n    }\n    scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\n    if (!swiper.params.history.replaceState) {\n      window.addEventListener('popstate', setHistoryPopState);\n    }\n  };\n  const destroy = () => {\n    const window = getWindow();\n    if (!swiper.params.history.replaceState) {\n      window.removeEventListener('popstate', setHistoryPopState);\n    }\n  };\n  on('init', () => {\n    if (swiper.params.history.enabled) {\n      init();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.params.history.enabled) {\n      destroy();\n    }\n  });\n  on('transitionEnd _freeModeNoMomentumRelease', () => {\n    if (initialized) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n  on('slideChange', () => {\n    if (initialized && swiper.params.cssMode) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n}\n\nexport { History as default };\n",
      "start": 1710320465673,
      "end": 1710320466001,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710320466001,
      "end": 1710320466001,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710320466001,
      "end": 1710320466001,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710320466001,
      "end": 1710320466001,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710320466001,
      "end": 1710320466001,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710320466001,
      "end": 1710320466001,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710320466001,
      "end": 1710320466001,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710320466001,
      "end": 1710320466001,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710320466001,
      "end": 1710320466001,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710320466001,
      "end": 1710320466001,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710320466001,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "vite-plugin-eslint",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710320466002,
      "end": 1710320466002,
      "order": "normal"
    }
  ]
}
